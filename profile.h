#ifndef USER_H
#define USER_H

#include <QString>
#include <QImage>
#include <QVector>

struct Profile
{
    //basic fields
    QString first_name; //имя.
    QString last_name;  //фамилия.
    QString deactivated;//поле возвращается, если страница пользователя удалена или заблокирована, содержит значение deleted или banned. В этом случае дополнительные поля fields не возвращаются.
    bool hidden;    //возвращается 1 при вызове без access_token, если пользователь установил настройку «Кому в интернете видна моя страница» — «Только пользователям ВКонтакте». В этом случае дополнительные поля fields не возвращаются.

    //advanced fields
    QString bdate;  //дата рождения. Возвращается в формате DD.MM.YYYY или DD.MM (если год рождения скрыт). Если дата рождения скрыта целиком, поле отсутствует в ответе.
    struct City{    //информация о городе, указанном на странице пользователя в разделе «Контакты». Возвращаются следующие поля:
        int id; //идентификатор города, который можно использовать для получения его названия с помощью метода database.getCitiesById;
        QString title;  //— название города.
    } city;
    QString connections;    //возвращает данные об указанных в профиле сервисах пользователя, таких как: skype, facebook, twitter, livejournal, instagram.
    struct Contacts{    //информация о телефонных номерах пользователя. Если данные указаны и не скрыты настройками приватности, возвращаются следующие поля:
        QString mobile_phone; //— номер мобильного телефона пользователя (только для Standalone-приложений);
        QString home_phone; //— дополнительный номер телефона пользователя.
    } contacts;
    struct Country{ //информация о стране, указанной на странице пользователя в разделе «Контакты». Возвращаются следующие поля:
        int id; //— идентификатор страны, который можно использовать для получения ее названия с помощью метода database.getCountriesById;
        QString title;  //— название страны.
    } country;
    bool is_favorite;   //информация о том, есть ли пользователь в закладках у текущего пользователя. Возможные значения:
    bool is_friend; //информация о том, является ли пользователем другом текущего пользователя. Возможные значения:
    struct Last_seen{   //время последнего посещения. Объект, содержащий следующие поля:
        int time;   //время последнего посещения в формате Unixtime.
        int platform; //тип платформы, через которую был осуществлён последний вход. Возможные значения:
            //1 — мобильная версия;
            //2 — приложение для iPhone;
            //3 — приложение для iPad;
            //4 — приложение для Android;
            //5 — приложение для Windows Phone;
            //6 — приложение для Windows 8;
            //7 — полная версия сайта.
    } last_seen;
    QString photo_100;
    QString status; //статус пользователя. Возвращается строка, содержащая текст статуса, расположенного в профиле под именем пользователя. Если у пользователя включена опция «Транслировать в статус играющую музыку», будет возвращено дополнительное поле status_audio, содержащее информацию о транслируемой композиции.
    int sex;    //пол пользователя. Возможные значения:
//        1 — женский;
//        2 — мужской;
//        0 — пол не указан.
    bool online;    //информация о том, находится ли пользователь сейчас на сайте. Если пользователь использует мобильное приложение либо мобильную версию сайта, возвращается дополнительное поле online_mobile, содержащее 1. При этом, если используется именно приложение, дополнительно возвращается поле online_app, содержащее его идентификатор.


    /*//Not implemented
    QString about; //содержимое поля «О себе» из профиля пользователя.
    QString activities; //содержимое поля «Деятельность» из профиля пользователя.
    bool blacklisted;   //информация о том, находится ли текущий пользователь в черном списке. Возможные значения:
    bool blacklisted_by_me; //информация о том, находится ли пользователь в черном списке у текущего пользователя. Возможные значения:
    QString books;  //содержимое поля «Любимые книги» из профиля пользователя.
    bool can_post;  //информация о том, может ли текущий пользователь оставлять записи на стене. Возможные значения:
    bool can_see_all_posts; //информация о том, может ли текущий пользователь видеть чужие записи на стене. Возможные значения:
    bool can_see_audio; //информация о том, может ли текущий пользователь видеть аудиозаписи. Возможные значения:
    bool can_send_friend_request;   //информация о том, будет ли отправлено уведомление пользователю о заявке в друзья от текущего пользователя. Возможные значения:
    bool can_write_private_message; //информация о том, может ли текущий пользователь отправить личное сообщение. Возможные значения:
    struct Career{  //информация о карьере пользователя. Объект, содержащий следующие поля:
        int group_id; //— идентификатор сообщества (если доступно, иначе company);
        QString company;    //— название компании (если доступно, иначе group_id);
        int country_id;   // — идентификатор страны;
        int city_id;  // — идентификатор города (если доступно, иначе city_name);
        QString city_name;  //— название города (если доступно, иначе city_id);
        int from;   //— год начала работы;
        int until;  //— год окончания работы;
        QString position;   //— должность.
    } career;
    int common_count;   //количество общих друзей с текущим пользователем.
    struct Counters{    //количество различных объектов у пользователя. Поле возвращается только в методе users.get при запросе информации об одном пользователе, с передачей access_token.
        int albums; //— количество фотоальбомов;
        int videos; //— количество видеозаписей;
        int audios; //— количество аудиозаписей;
        int photos; //— количество фотографий;
        int notes;  //— количество заметок;
        int friends;// — количество друзей;
        int groups; //— количество сообществ;
        int online_friends; //— количество друзей онлайн;
        int mutual_friends; //— количество общих друзей;
        int user_videos; //— количество видеозаписей с пользователем;
        int followers;  //— количество подписчиков;
        int pages;  //— количество объектов в блоке «Интересные страницы».
    } counters;
    struct Crop_photo{  //возвращает данные о точках, по которым вырезаны профильная и миниатюрная фотографии пользователя.
        struct Photo{   //— объект photo фотографии пользователя, из которой вырезается главное фото профиля.
            //not implemented
        } photo;
        struct Crop{    //— вырезанная фотография пользователя. Содержит следующие поля:
            double x;   //— координата X левого верхнего угла в процентах;
            double y;   //— координата Y левого верхнего угла в процентах;
            double x2;  //— координата X правого нижнего угла в процентах;
            double y2;  // — координата Y правого нижнего угла в процентах.
        } crop;
        struct Rect{ //— миниатюрная квадратная фотография, вырезанная из фотографии crop. Содержит набор полей, аналогичный объекту crop.
            double x;   //— координата X левого верхнего угла в процентах;
            double y;   //— координата Y левого верхнего угла в процентах;
            double x2;  //— координата X правого нижнего угла в процентах;
            double y2;  // — координата Y правого нижнего угла в процентах.
        } rect;
    } crop_photo;
    QString domain; //короткий адрес страницы. Возвращается строка, содержащая короткий адрес страницы (например, andrew). Если он не назначен, возвращается "id"+user_id, например, id35828305.
    struct Education{   //информация о высшем учебном заведении пользователя. Объект, содержащий следующие поля:
        int university; //— идентификатор университета;
        QString university_name;    //название университета;
        int facultyl;   //идентификатор факультета;
        QString faculty_name;   //— название факультета;
        int graduation; //— год окончания.
    } education;
    QString exports;    //внешние сервисы, в которые настроен экспорт из ВК (twitter, facebook, livejournal, instagram).
    QString first_name_nom; //— именительный;
    QString first_name_gen; //— родительный;
    QString first_name_dat; //— дательный;
    QString first_name_acc; //— винительный;
    QString first_name_ins; //— творительный;
    QString first_name_abl; //— предложный;
    int followers_count;    //количество подписчиков пользователя.
    QString games;  //содержимое поля «Любимые игры» из профиля пользователя.
    bool has_mobile;    //информация о том, известен ли номер мобильного телефона пользователя. Возвращаемые значения: 1 — известен, 0 — не известен.
    bool has_photo; //1, если текущий пользователь установил фотографию для профиля.
    QString home_town;  //название родного города пользователя.
    QString interests;  //содержимое поля «Интересы» из профиля пользователя.
    int friend_status;  //статус дружбы с пользователем. Возможные значения:
        //0 — не является другом,
        //1 — отправлена заявка/подписка пользователю,
        //2 — имеется входящая заявка/подписка от пользователя,
        //3 — является другом.
    bool is_hidden_from_feed;   //информация о том, скрыт ли пользователь из ленты новостей текущего пользователя. Возможные значения:
    QString last_name_nom;
    QString last_name_gen;
    QString last_name_dat;
    QString last_name_acc;
    QString last_name_ins;
    QString last_name_abl;
    QString lists;  //разделенные запятой идентификаторы списков друзей, в которых состоит пользователь. Поле доступно только для метода friends.get.
    QString maiden_name;    //девичья фамилия.
    struct Military{    //  информация о военной службе пользователя. Объект, содержащий следующие поля:
        QString unit;   //номер части;
        QString unit_id;    //идентификатор части в базе данных;
        int country_id; //идентификатор страны, в которой находится часть;
        int from;   //год начала службы;
        int until;  //год окончания службы.
    } military;
    QString movies; //содержимое поля «Любимые фильмы» из профиля пользователя.
    QString nickname;   //никнейм (отчество) пользователя.
    struct Occupation{  //информация о текущем роде занятия пользователя. Объект, содержащий следующие поля:
        QString type;   //тип. Возможные значения:
            //work — работа;
            //school — среднее образование;
            //university — высшее образование.
        int id; //идентификатор школы, вуза, сообщества компании (в которой пользователь работает);
        QString name;   //название школы, вуза или места работы;
    } occupation;
    struct personal{    //информация о полях из раздела «Жизненная позиция».
        int political;  //политические предпочтения. Возможные значения:
            //1 — коммунистические;
            //2 — социалистические;
            //3 — умеренные;
            //4 — либеральные;
            //5 — консервативные;
            //6 — монархические;
            //7 — ультраконсервативные;
            //8 — индифферентные;
            //9 — либертарианские.
        QString langs;  // (array) — языки.
        QString religion;   //мировоззрение.
        QString inspired_by;   //источники вдохновения.
        int people_main;    //главное в людях. Возможные значения:
            //1 — ум и креативность;
            //2 — доброта и честность;
            //3 — красота и здоровье;
            //4 — власть и богатство;
            //5 — смелость и упорство;
            //6 — юмор и жизнелюбие.
        int life_main;  //главное в жизни. Возможные значения:
//            1 — семья и дети;
//            2 — карьера и деньги;
//            3 — развлечения и отдых;
//            4 — наука и исследования;
//            5 — совершенствование мира;
//            6 — саморазвитие;
//            7 — красота и искусство;
//            8 — слава и влияние;
        int smoking;    //отношение к курению. Возможные значения:
//            1 — резко негативное;
//            2 — негативное;
//            3 — нейтральное;
//            4 — компромиссное;
//            5 — положительное.
        int alcohol;    //отношение к алкоголю. Возможные значения:
//            1 — резко негативное;
//            2 — негативное;
//            3 — нейтральное;
//            4 — компромиссное;
//            5 — положительное.
    QString photo_50;   //url квадратной фотографии пользователя, имеющей ширину 50 пикселей. В случае отсутствия у пользователя фотографии возвращается http://vk.com/images/camera_c.gif.
    QString photo_200_orig;
    QString photo_200;
    QString photo_400_orig;
    QString photo_id;   //строковый идентификатор главной фотографии профиля пользователя в формате {user_id}_{photo_id}, например, 6492_192164258. В некоторых случаях (если фотография была установлена очень давно) это поле не возвращается.
    QString photo_max;  //url квадратной фотографии пользователя с максимальной шириной. Может быть возвращена фотография, имеющая ширину как 200, так и 100 пикселей. В случае отсутствия у пользователя фотографии возвращается http://vk.com/images/camera_b.gif.
    QString photo_max_orig; //url фотографии пользователя максимального размера. Может быть возвращена фотография, имеющая ширину как 400, так и 200 пикселей. В случае отсутствия у пользователя фотографии возвращается http://vk.com/images/camera_a.gif.
    QString quotes; //любимые цитаты.
    struct Relatives{   //список родственников текущего пользователя. Массив объектов, каждый из которых содержит поля:
        int id; //идентификатор пользователя;
        QString name;   //имя родственника (в том случае, если родственник не является пользователем ВКонтакте, в этом случае id не возвращается);
        QString type;   //тип родственной связи. Возможные значения:
//            child — сын/дочь;
//            sibling — брат/сестра;
//            parent — отец/мать;
//            grandparent — дедушка/бабушка;
//            grandchild — внук/внучка.
    };
    QVector<Relatives> relatives;
    int relation;   //семейное положение пользователя. Возможные значения:
//        1 — не женат/не замужем;
//        2 — есть друг/есть подруга;
//        3 — помолвлен/помолвлена;
//        4 — женат/замужем:
//        5 — всё сложно;
//        6 — в активном поиске;
//        7 — влюблён/влюблена;
//        0 — не указано.
    //relation_partner
    struct School{  //список школ, в которых учился пользователь. Массив объектов, описывающих школы. Каждый объект содержит следующие поля:
        QString id; //идентификатор школы;
        int country;    //идентификатор страны, в которой расположена школа;
        int city;   //идентификатор города, в котором расположена школа;
        QString name;   //наименование школы
        int year_from;  //год начала обучения;
        int year_to;    //год окончания обучения;
        int year_graduated; //год выпуска;
        QString classChar;  //буква класса;
        QString speciality; //специализация;
        int type;   //идентификатор типа;
        QString type_str;   //название типа. Возможные значения для пар type-typeStr:
//            0 — "школа";
//            1 — "гимназия";
//            2 —"лицей";
//            3 — "школа-интернат";
//            4 — "школа вечерняя";
//            5 — "школа музыкальная";
//            6 — "школа спортивная";
//            7 — "школа художественная";
//            8 — "колледж";
//            9 — "профессиональный лицей";
//            10 — "техникум";
//            11 — "ПТУ";
//            12 — "училище";
//            13 — "школа искусств".
    };
    QVector<School> schools;
    QString screen_name;    //короткое имя страницы пользователя.
    QString site;   //адрес сайта, указанный в профиле сайт пользователя.
    int timezone;   //временная зона пользователя. Возвращается только при запросе информации о текущем пользователе.
    QString tv; //любимые телешоу.
    struct University{  //список вузов, в которых учился пользователь. Массив объектов, описывающих университеты. Каждый объект содержит следующие поля:
        int id; //идентификатор университета;
        int country;    //идентификатор страны, в которой расположен университет;
        int city;   //идентификатор города, в котором расположен университет;
        QString name;   //наименование университета;
        int faculty;    //идентификатор факультета;
        QString faculty_name;   //наименование факультета;
        int chair;  //идентификатор кафедры;
        QString chair_name; //наименование кафедры;
        int graduation; //год окончания обучения;
        QString education_form; //форма обучения;
        QString education_status;   //статус (например, «Выпускник (специалист)»).
    };
    QVector<University> universities;
    bool verified;  //возвращается 1, если страница пользователя верифицирована, 0 — если не верифицирована.
    bool wall_comments; //информация о том, включены ли комментарии на стене. Возможные значения:
//        1 — включены;
//        0 — отключены.
    */
};

#endif // USER_H
